package com.bn.st.d2;

import java.util.HashMap;

import com.bn.clp.Constant;

import android.app.Activity;
import android.app.Dialog;
import android.content.Context;
import android.content.SharedPreferences;
import android.content.pm.ActivityInfo;
import android.hardware.SensorManager;
import android.media.AudioManager;
import android.media.SoundPool;
import android.os.Bundle;
import android.os.Handler;
import android.os.Message;
import android.provider.Settings;
import android.view.KeyEvent;
import android.view.Window;
import android.view.WindowManager;

public class MyActivity extends Activity {

	public static Object boatInitLock = new Object();
	public Handler hd;//

	// SensorManager
	SensorManager mySensorManager;

	SharedPreferences sp;
	SoundPool shengyinChi;// 
	HashMap<Integer, Integer> soundIdMap;// 

	int flag;

	@Override
	protected void onCreate(Bundle savedInstanceState) {
		// TODO Auto-generated method stub
		super.onCreate(savedInstanceState);
		this.sp = this.getSharedPreferences("actm", Context.MODE_PRIVATE);

		Constant.BgSoundFlag = this.sp.getBoolean("bgSoundFlag", true);
		Constant.SoundEffectFlag = this.sp.getBoolean("soundEffectFlag", true);

		this.chushihuaSounds();

		// 
		this.requestWindowFeature(Window.FEATURE_NO_TITLE);
		this.getWindow().setFlags(WindowManager.LayoutParams.FLAG_FULLSCREEN,
				WindowManager.LayoutParams.FLAG_FULLSCREEN);
		//
		this.setRequestedOrientation(ActivityInfo.SCREEN_ORIENTATION_LANDSCAPE);

		// 
		this.setVolumeControlStream(AudioManager.STREAM_MUSIC);

		// 
		DBUtil.createTable();

		this.flag = Settings.System.getInt(this.getContentResolver(),
				Settings.System.ACCELEROMETER_ROTATION, 0);
		Settings.System.putInt(this.getContentResolver(),
				Settings.System.ACCELEROMETER_ROTATION, 1);

		Constant.SCREEN_WIDTH = this.getWindowManager().getDefaultDisplay()
				.getWidth();
		Constant.SCREEN_HEIGHT = this.getWindowManager().getDefaultDisplay()
				.getHeight();

		float screenHeightTemp = Constant.SCREEN_HEIGHT;// 
		float screenWidthTemp = Constant.SCREEN_WIDTH;

		if (screenHeightTemp > screenWidthTemp) //
		{
			Constant.SCREEN_WIDTH = screenHeightTemp;
			Constant.SCREEN_HEIGHT = screenWidthTemp;
		}

		Constant.screenRatio = Constant.SCREEN_WIDTH / Constant.SCREEN_HEIGHT;// 

		if (Math.abs(Constant.screenRatio - Constant.screenRatio854x480) < 0.001f) {
			Constant.screenId = 1;
		} else if (Math.abs(Constant.screenRatio - Constant.screenRatio480x320) < 0.01f) {
			Constant.screenId = 3;
		} else if (Math.abs(Constant.screenRatio - Constant.screenRatio960x540) < 0.001f) {
			Constant.screenId = 2;
		} else {
			Constant.screenId = 0;
		}
		Constant.ratio_height = Constant.SCREEN_HEIGHT / 480;
		Constant.ratio_width = Constant.SCREEN_WIDTH / 854;

		this.mySensorManager = (SensorManager) getSystemService(SENSOR_SERVICE);

		new Thread() {
			public void run() {
				synchronized (boatInitLock) {

				}
			}
		}.start();
		this.hd = new Handler() {

			@Override
			public void handleMessage(Message msg) {
				// TODO Auto-generated method stub
				switch (msg.what) {
				case 0:// 
					gotoWelcomeView();
					break;
				case 1:// 
					break;
				case 2://
					break;
				case 3:// 
					break;
				case 4://
					break;
				case 5:// 
					break;
				case 6:// 
					break;
				case 7:// 
					break;
				case 8:// 
					break;
				case 9:// 
					break;
				case 10:// 
					break;
				case 11://
					break;
				case 12://
					break;
				}

			}

		};
		this.hd.sendEmptyMessage(0);
	}

	// 
	public void chushihuaSounds() {
		shengyinChi = new SoundPool(7, AudioManager.STREAM_MUSIC, 100);
		soundIdMap = new HashMap<Integer, Integer>();
		soundIdMap.put(1, shengyinChi.load(this, R.raw.pengzhuang, 1));//
		soundIdMap.put(2, shengyinChi.load(this, R.raw.boatgo, 1));//
		soundIdMap.put(3, shengyinChi.load(this, R.raw.eatthings1, 1));// 
		soundIdMap.put(4, shengyinChi.load(this, R.raw.zhuangfei, 1));//
		soundIdMap.put(5, shengyinChi.load(this, R.raw.daojishi, 1));//
		soundIdMap.put(6, shengyinChi.load(this, R.raw.start, 1));//
	}

	@Override
	public boolean onKeyDown(int keyCode, KeyEvent event) {
		// TODO Auto-generated method stub
		return super.onKeyDown(keyCode, event);
	}

	@Override
	protected void onPause() {
		// TODO Auto-generated method stub
		super.onPause();
	}

	@Override
	protected void onResume() {
		// TODO Auto-generated method stub
		super.onResume();
	}

	@Override
	protected Dialog onCreateDialog(int id) {
		// TODO Auto-generated method stub
		return super.onCreateDialog(id);
	}

	@Override
	protected void onPrepareDialog(int id, Dialog dialog) {
		// TODO Auto-generated method stub
		super.onPrepareDialog(id, dialog);
	}

	// 
	public void gotoWelcomeView() {
		
	}
}
